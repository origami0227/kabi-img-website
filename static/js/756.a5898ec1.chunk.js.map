{"version":3,"file":"static/js/756.a5898ec1.chunk.js","mappings":"8MAOMA,EAAUC,EAAAA,GAAAA,IAAU,sIAMpBC,EAAQD,EAAAA,GAAAA,GAAS,uEA4HvB,UAvHiB,WACb,IAAOE,GAAaC,EAAAA,EAAAA,KAAbD,UACDE,GAAWC,EAAAA,EAAAA,MAkBXC,EAAmB,CACrBC,SAAQ,SAACC,EAAMC,GACX,MAAI,KAAKC,KAAKD,GAAeE,QAAQC,OAAO,oGACxCH,EAAMI,OAAS,GAAKJ,EAAMI,OAAS,GAAWF,QAAQC,OAAO,8DAC1DD,QAAQG,SACnB,GAWJ,OACI,UAACf,EAAO,YACJ,SAACE,EAAK,4BACN,UAAC,IAAI,CACDc,KAAK,QACLC,SAAU,CACNC,KAAM,GAEVC,WAAY,CACRD,KAAM,IAEVE,cAAe,CACXC,UAAU,GAEdC,SA/CK,SAACC,GACdC,QAAQC,IAAI,WAAYF,GACxBpB,EAAUuB,YAAYH,EAAOf,UAC7BL,EAAUwB,YAAYJ,EAAOK,UAC7BzB,EAAU0B,WACLC,MAAK,WACFN,QAAQC,IAAI,gEACZpB,EAAS,IACb,IACC0B,OAAM,WACHP,QAAQC,IAAI,+DAChB,GACR,EAoCYO,eAnCW,SAACC,GACpBT,QAAQC,IAAI,UAAWQ,EAC3B,EAkCYC,aAAa,MAAK,WAElB,SAAC,SAAS,CACNC,MAAM,qBACNnB,KAAK,WACLoB,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,wCAEb,CACIC,UAAWhC,EAAiBC,WAElC,UAEF,SAAC,IAAK,OAGV,SAAC,SAAS,CACN2B,MAAM,eACNnB,KAAK,WACLoB,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,kCAEb,CACIE,IAAK,EACLF,QAAS,+CAEb,CACIG,IAAK,GACLH,QAAS,iDAEf,UAEF,SAAC,aAAc,OAGnB,SAAC,SAAS,CACNH,MAAM,2BACNnB,KAAK,kBACLoB,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,8CArET,SAAH,OAAKI,EAAa,EAAbA,cAAa,MAAO,CAC1CH,UAAS,SAAC9B,EAAMC,GACZ,OAAKA,GAASgC,EAAc,cAAgBhC,EAGrCE,QAAQC,OAAO,8CAFXD,QAAQG,SAGvB,EACH,GAiEiB,UAEF,SAAC,aAAc,OAGnB,SAAC,SAAS,CACNI,WAAY,CACRwB,OAAQ,EACRzB,KAAM,IACR,UAEF,SAAC,IAAM,CAAC0B,KAAK,UAAUC,SAAS,SAAQ,iCAO5D,C","sources":["pages/Register.js"],"sourcesContent":["import React from 'react';\nimport {Button, Form, Input} from 'antd';\nimport styled from 'styled-components'\nimport {useStores} from \"../stores\";\nimport {useNavigate} from \"react-router-dom\";\n\n\nconst Wrapper = styled.div`\n  max-width: 600px;\n  margin: 30px auto;\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.2);\n  padding: 20px;\n`\nconst Title = styled.h1`\n  text-align: center;\n  margin-bottom: 30px;\n`\n\nconst Register = () => {\n    const {AuthStore} = useStores()\n    const navigate = useNavigate()\n    const onFinish = (values) => {\n        console.log('Success:', values);\n        AuthStore.setUsername(values.username)\n        AuthStore.setPassword(values.password)//先设置好用户名和密码调用login的时候才能找到相应的属性\n        AuthStore.register()\n            .then(() => {\n                console.log('注册成功，跳转到首页')\n                navigate('/')\n            })\n            .catch(() => {\n                console.log('注册失败，什么都不做')\n            })\n    };\n    const onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n    };\n    //用户名校验\n    const validateUsername = {\n        username(rule, value,) {\n            if (/\\W/.test(value)) return Promise.reject('不能出现下划线字母数字以外的字符')\n            if (value.length < 4 || value.length > 10) return Promise.reject('用户名长度为4-10个字符')\n            return Promise.resolve()\n        }\n    }\n    //确认密码校验\n    const confirmPassword = ({getFieldValue}) => ({\n        validator(rule, value) {\n            if (!value || getFieldValue('password') === value) {\n                return Promise.resolve() //未输入或者两次密码匹配的情况\n            }\n            return Promise.reject('两次密码不匹配')\n        }\n    })\n    return (\n        <Wrapper>\n            <Title>注册</Title>\n            <Form\n                name=\"basic\"\n                labelCol={{\n                    span: 8,\n                }}\n                wrapperCol={{\n                    span: 16,\n                }}\n                initialValues={{\n                    remember: true,\n                }}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n                <Form.Item\n                    label=\"用户名\"\n                    name=\"username\"\n                    rules={[\n                        {\n                            required: true,\n                            message: '请输入用户名',\n                        },\n                        {\n                            validator: validateUsername.username\n                        }\n                    ]}\n                >\n                    <Input/>\n                </Form.Item>\n\n                <Form.Item\n                    label=\"密码\"\n                    name=\"password\"\n                    rules={[\n                        {\n                            required: true,\n                            message: '请输入密码', //不填会提示\n                        },\n                        {\n                            min: 6,\n                            message: '最少输入6个字符',//如果比六个字符小则会提示\n                        },\n                        {\n                            max: 16,\n                            message: '不能超过16个字符',//超过16个字符也会提示\n                        }\n                    ]}\n                >\n                    <Input.Password/>\n                </Form.Item>\n\n                <Form.Item\n                    label=\"确认密码\"\n                    name=\"confirmPassword\"\n                    rules={[\n                        {\n                            required: true,\n                            message: '请再次确认密码',\n                        },\n                        confirmPassword\n                    ]}\n                >\n                    <Input.Password/>\n                </Form.Item>\n\n                <Form.Item\n                    wrapperCol={{\n                        offset: 8,//偏移\n                        span: 16,\n                    }}\n                >\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        提交\n                    </Button>\n                </Form.Item>\n            </Form>\n        </Wrapper>\n    );\n};\nexport default Register;"],"names":["Wrapper","styled","Title","AuthStore","useStores","navigate","useNavigate","validateUsername","username","rule","value","test","Promise","reject","length","resolve","name","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","console","log","setUsername","setPassword","password","register","then","catch","onFinishFailed","errorInfo","autoComplete","label","rules","required","message","validator","min","max","getFieldValue","offset","type","htmlType"],"sourceRoot":""}